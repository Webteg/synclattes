#!/usr/bin/python
# -*- encoding: utf-8 -*-
import re, sys, logging, traceback
from collections import namedtuple
from recordtype import recordtype
from ufscar.pessoa import PessoaInstituicao
from metadata import JSONMetadataBuilder, CF
from conf.dspaceconf import authorityPrefix
import ws, db, iso639, doiutil, util

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('extract')

class MetadataProcessor(JSONMetadataBuilder):
    def run(self):
        return self\
               .processAutores()\
               .processPalavrasChave()\
               .processAreasConhecimento()\
               .processSetoresAtividade()\
               .processDadosGerais()

    def processAutores(self):
        autores = [MetadataProcessor.xmlToAuthor(autor) for autor in
                   sorted(self.xml.xpath('AUTORES'),
                          key=lambda autor: int(autor.get('ORDEM-DE-AUTORIA')))]
        myidcnpq = self.cvproc.pessoaLattes.id_cnpq
        confidenceInMyself = CF.UNCERTAIN
        if myidcnpq not in (a.idcnpq for a in autores):
            # Autor proprietário do currículo não está marcado no atributo NRO-ID-CNPQ
            # Faz score dos autores que não possuem idcnpq especificado
            STpl = namedtuple('STpl', ['score', 'autor'])
            score = lambda a: \
                int(a.nomecompleto == self.cvproc.nomeCompleto) + \
                int(a.nomecitacao in self.cvproc.nomesEmCitacoes)
            scoredAutores = sorted((STpl(score(a), a) for a in autores if a.idcnpq is None), reverse=True)
            # Verifica se algum match foi encontrado
            if len(scoredAutores) == 0 or scoredAutores[0].score == 0:
                logger.critical(
                    'Autor não encontrado em sua própria produção! item=%r, autores=%r, scoredAutores=%r',
                    self.item, autores, scoredAutores
                )
                raise MetadataAbortItemException()
            # Define idcnpq para o melhor score
            scoredAutores[0].autor.idcnpq = myidcnpq
            if len(scoredAutores) > 1 and scoredAutores[0].score == scoredAutores[1].score:
                # Empate de score
                confidenceInMyself = CF.AMBIGUOUS
        for autor in autores:
            authority  = util.maybeBind(lambda x: authorityPrefix + x, autor.idcnpq)
            confidence = confidenceInMyself \
                if autor.idcnpq == myidcnpq \
                else util.maybeBind(lambda _: CF.UNCERTAIN, authority)
            self.add(element='contributor', qualifier='author',
                     authority=authority, confidence=confidence, value=autor.nomecitacao,
                     _nomecompleto=autor.nomecompleto)
        return self

    Author = recordtype('Author', ['idcnpq', 'nomecompleto', 'nomecitacao'])
    authorAttrs = ('NRO-ID-CNPQ', 'NOME-COMPLETO-DO-AUTOR', 'NOME-PARA-CITACAO')
    @staticmethod
    def xmlToAuthor(xml):
        return MetadataProcessor.Author(*(util.noneIfEmpty(xml.get(k))
                                          for k in MetadataProcessor.authorAttrs))

    def processPalavrasChave(self):
        for palavrasChave in self.xml.xpath('PALAVRAS-CHAVE'):
            for attrname, attrval in sorted(palavrasChave.items()):
                self.add(element='subject', value=attrval)
        return self

    def processAreasConhecimento(self):
        sel = "AREAS-DO-CONHECIMENTO/*[starts-with(name(), 'AREA-DO-CONHECIMENTO')]"
        for areaConhecimento in self.xml.xpath(sel):
            nomeArea = [util.noneIfEmpty(areaConhecimento.get(attr)) for attr in
                        ('NOME-GRANDE-AREA-DO-CONHECIMENTO',
                         'NOME-DA-AREA-DO-CONHECIMENTO',
                         'NOME-DA-SUB-AREA-DO-CONHECIMENTO',
                         'NOME-DA-ESPECIALIDADE')]
            beautiful = lambda s: ' '.join(word.capitalize() for word in s.split('_'))
            nomeArea[0] = util.maybeBind(beautiful, nomeArea[0])
            nomeArea = '. '.join(subNome for subNome in nomeArea if subNome is not None)
            self.add(element='subject', qualifier='classification', lang='por',
                     value=nomeArea, _origem='area-conhecimento')
        return self

    def processSetoresAtividade(self):
        for setoresAtividade in self.xml.xpath('SETORES-DE-ATIVIDADE'):
            for attrname, attrval in sorted(setoresAtividade.items()):
                self.add(element='subject', qualifier='classification', lang='por',
                         value=attrval, _origem='setor-atividade')
        return self

    def addDadosGerais(self, doi=None, titulo=None, tituloIngles=None,
                       ano=None, idioma=None, url=None, relevancia=None,
                       pubVenue=None, issn=None, isbn=None, citation=None,
                       **kwargs):

        # Evita erros de digitação nas chamadas
        assert(len(kwargs) == 0)

        # Trata formato de DOI legado do XML do CV Lattes
        m = re.search(r'\[doi:([^]]+)\]', url)
        if m:
            if doi is None:
                doi = m.group(1)
            url = url.replace('[doi:%s]'%doi, '')

        self.add(element='identifier', qualifier='uri',
                 value=doiutil.toUrl(doi))

        idioma = iso639.lookup(idioma)
        self.add(element='title', lang=idioma, value=titulo)
        if idioma != 'eng':
            self.add(element='title', lang='eng', value=tituloIngles)
        self.add(element='language', qualifier='iso', value=idioma)

        self.add(element='date', qualifier='issued', value=ano)

        if url is not None:
            if url.startswith('[') and url.endswith(']'):
                url = url[1:-1]
            if url.startswith('http://') or url.startswith('https://'):
                self.add(element='identifier', qualifier='uri', value=url)

        if relevancia:
            self.add(mdschema='_lattes', element='relevancia', value=True)

        self.add(element='relation', qualifier='ispartof', value=pubVenue)
        self.add(element='identifier', qualifier='issn', value=issn)
        self.add(element='identifier', qualifier='isbn', value=isbn)
        self.add(element='identifier', qualifier='citation', value=citation)
        return self

    @staticmethod
    def new(cvproc, item, xml):
        return MetadataProcessor.supportedTags[xml.tag](cvproc, item, xml)

    @staticmethod
    def getSeqProd(xml):
        return int(xml.get('SEQUENCIA-PRODUCAO'))

    def __init__(self, cvproc, item, xml):
        super(MetadataProcessor, self).__init__()
        assert(isinstance(cvproc, CVProcessor))
        assert(isinstance(item, db.Item))
        self.cvproc = cvproc
        self.item = item
        self.xml = xml


class MetadataProcessorArtigo(MetadataProcessor):
    def run(self):
        self.add(element='type', value='article')
        return super(MetadataProcessorArtigo, self).run()

    def processDadosGerais(self):
        b = util.singleTag(self.xml.xpath('DADOS-BASICOS-DO-ARTIGO'))
        d = util.singleTag(self.xml.xpath('DETALHAMENTO-DO-ARTIGO'))

        ano = b.get('ANO-DO-ARTIGO')
        pubVenue = d.get('TITULO-DO-PERIODICO-OU-REVISTA')

        return self.addDadosGerais(
            doi=b.get('DOI'),
            titulo=b.get('TITULO-DO-ARTIGO'),
            tituloIngles=b.get('TITULO-DO-ARTIGO-INGLES'),
            ano=ano,
            idioma=b.get('IDIOMA'),
            url=b.get('HOME-PAGE-DO-TRABALHO'),
            relevancia=b.get('FLAG-RELEVANCIA'),
            pubVenue=pubVenue,
            issn=d.get('ISSN'),
            citation=buildCitation(ano, pubVenue, d),
        )


class MetadataProcessorTrabalhoEventos(MetadataProcessor):
    def run(self):
        self.add(element='type', value='conferenceObject')
        return super(MetadataProcessorTrabalhoEventos, self).run()

    def processDadosGerais(self):
        b = util.singleTag(self.xml.xpath('DADOS-BASICOS-DO-TRABALHO'))
        d = util.singleTag(self.xml.xpath('DETALHAMENTO-DO-TRABALHO'))

        ano = b.get('ANO-DO-TRABALHO')
        pubVenue = d.get('TITULO-DOS-ANAIS-OU-PROCEEDINGS')

        # Tratamento para TITULO-DOS-ANAIS-OU-PROCEEDINGS
        # contendo apenas prefixo do livro
        if re.sub(r'[^a-z]', '', util.norm(pubVenue)) in {'anais', 'proceedings'}:
            pubVenue = util.noneIfEmpty(d.get('NOME-DO-EVENTO')) \
                or pubVenue

        return self.addDadosGerais(
            doi=b.get('DOI'),
            titulo=b.get('TITULO-DO-TRABALHO'),
            tituloIngles=b.get('TITULO-DO-TRABALHO-INGLES'),
            ano=ano,
            idioma=b.get('IDIOMA'),
            url=b.get('HOME-PAGE-DO-TRABALHO'),
            relevancia=b.get('FLAG-RELEVANCIA'),
            pubVenue=pubVenue,
            isbn=d.get('ISBN'),
            citation=buildCitation(ano, pubVenue, d),
        )


MetadataProcessor.supportedTags = {
    'ARTIGO-PUBLICADO': MetadataProcessorArtigo,
    'TRABALHO-EM-EVENTOS': MetadataProcessorTrabalhoEventos
}

MetadataProcessor.xpathSel = '|'.join(
    '//'+tag for tag in MetadataProcessor.supportedTags)


class MetadataAbortItemException(Exception):
    pass


def buildCitation(ano, pubVenue, xml):
    ano = util.noneIfEmpty(ano)
    pubVenue = util.noneIfEmpty(pubVenue)

    xget = lambda k: util.noneIfEmpty(xml.get(k))

    vol = xget('VOLUME')
    num = xget('FASCICULO')
    localidade = xget('CIDADE-DA-EDITORA')
    editora = xget('NOME-DA-EDITORA')
    pagInicial = xget('PAGINA-INICIAL')
    pagFinal = xget('PAGINA-FINAL')

    vol = util.maybeBind(lambda s: 'v. '+s, vol)
    num = util.maybeBind(lambda s: 'n. '+s, num)

    loc_ed = None
    if localidade and editora:
        loc_ed = localidade + ': ' + editora
    else:
        loc_ed = localidade or editora

    pp = None
    if pagInicial and pagFinal:
        pp = 'pp. ' + pagInicial + '-' + pagFinal
    else:
        pp = pagInicial or pagFinal

    biblio = [pubVenue, loc_ed, vol, num, pp, ano]
    return ', '.join(info for info in biblio if info is not None)


class CVProcessor(object):
    def __init__(self, pessoaLattes, xmlCV):
        assert(isinstance(pessoaLattes, db.PessoaLattes))
        self.pessoaLattes = pessoaLattes
        self.xmlCV = xmlCV
        self.seqProdInCV = set()
        self._initNomes()

    def _initNomes(self):
        dadosGerais = util.singleTag(self.xmlCV.xpath('//DADOS-GERAIS'))
        self.nomeCompleto = dadosGerais.get('NOME-COMPLETO')
        self.nomesEmCitacoes = {s.strip() for s in dadosGerais.get('NOME-EM-CITACOES-BIBLIOGRAFICAS').split(';')}

    def run(self):
        seqProdInDB = getItemsProdInDB(self.pessoaLattes)
        for xmlProducao in self.xmlCV.xpath(MetadataProcessor.xpathSel):
            self.processProducao(xmlProducao)
        processRemovedItems(self.pessoaLattes, seqProdInDB - self.seqProdInCV)

    def processProducao(self, xmlProducao):
        item = getOrCreateItem(self.pessoaLattes, xmlProducao)
        try:
            meta = MetadataProcessor.new(self, item, xmlProducao).run().build()
        except MetadataAbortItemException:
            traceback.print_exc()
            db.session.expunge(item)
            return
        lastMeta = db.session.query(db.Revision.meta)\
            .filter(db.Revision.item==item,
                    db.Revision.source=='extract')\
            .order_by(db.Revision.id.desc())\
            .limit(1).scalar()
        if meta != lastMeta:
            db.session.add(db.Revision(item=item, source='extract', meta=meta))
        self.seqProdInCV.add(item.seq_prod)


def getItemsProdInDB(pessoaLattes):
    """ Obtém o seq_prod de todos os itens de uma pessoa """
    return {row[0] for row in
        db.session.query(db.Item.seq_prod)\
        .filter(db.Item.pessoa_lattes==pessoaLattes,
                # O metadado da última revisão não é nulo
                # (indica que o item não foi excluído)
                db.session.query(db.Revision.meta)\
                    .filter(db.Revision.item_id==db.Item.id)\
                    .order_by(db.Revision.id.desc())\
                    .limit(1).as_scalar()
                .isnot(None))\
        .all()}

def processRemovedItems(pessoaLattes, seqProdToRemove):
    """ Processa itens que existem no DB mas foram excluídos do CV """
    for seqProd in seqProdToRemove:
        item = db.session.query(db.Item)\
            .filter(db.Item.pessoa_lattes==pessoaLattes, db.Item.seq_prod==seqProd)\
            .one()
        # Insere nova revisão do item com metadado nulo
        db.session.add(db.Revision(item=item, source='extract', meta=None))

def getOrCreateItem(pessoaLattes, xmlProducao):
    item, created = db.session\
        .get_or_create(db.Item, pessoa_lattes=pessoaLattes,
                       seq_prod=MetadataProcessor.getSeqProd(xmlProducao))
    if created:
        logger.debug('Novo item %r', item)
    return item

def processPerson(pessoa):
    pessoaLattes = getOrCreatePessoaLattes(pessoa)
    if pessoaLattes is None:
        return

    cv = tryGetCV(pessoaLattes.id_cnpq)
    if cv is None:
        return

    # Processa cada CV em uma transação
    logger.info('Processando CV de %r', pessoaLattes)
    try:
        CVProcessor(pessoaLattes, cv).run()
        db.session.commit()
    except:
        traceback.print_exc()
        db.session.rollback()


wsCV = ws.WSCurriculo()

def getOrCreatePessoaLattes(pessoa):
    if pessoa.getPessoaLattes() is None:
        cpf = pessoa.getCpf()
        logger.info('Obtendo id_cnpq do CPF %s', cpf)
        id_cnpq = wsCV.obterIdCNPq(cpf)
        if id_cnpq is None:
            logger.warning('A pessoa %r não possui CV Lattes',
                           pessoa.getEntidade())
            return None
        db.session.add(db.PessoaLattes(
            id_cnpq=id_cnpq,
            pessoa=pessoa.getEntidade()
        ))
        db.session.commit()
    return pessoa.getPessoaLattes()

def tryGetCV(id_cnpq):
    try:
        return wsCV.obterCV(id_cnpq)
    except:
        ocorrencia = None
        try:
            ocorrencia = wsCV.obterOcorrencia(id_cnpq)
        except:
            traceback.print_exc()
        logger.error('Impossível obter CV do id_cnpq %s: %r', id_cnpq, ocorrencia)
    return None


def main():
    for line in sys.stdin.xreadlines():
        pessoaIdent = util.onlyNumbers(line)
        if pessoaIdent == '':
            if line.strip() != '':
                logger.warn('Ignorando linha não compreendida: %r', line)
            continue
        pessoa = PessoaInstituicao.fromIdentificador(pessoaIdent)
        if pessoa is None:
            logger.error('Ignorando pessoa não encontrada: %s', pessoaIdent)
        else:
            processPerson(pessoa)

if __name__ == '__main__':
    main()