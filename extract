#!/usr/bin/python
# -*- encoding: utf-8 -*-
import sys, logging, traceback
from ufscar.pessoa import PessoaInstituicao
from metadata import JSONMetadataBuilder, CF
from conf.dspaceconf import authorityPrefix
import ws, db, util

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('extract')

def metadataArtigo(item, xmlCV, xmlProducao):
    meta = JSONMetadataBuilder()
    autores = sorted(xmlProducao.xpath('AUTORES'),
                     key=lambda autor: int(autor.get('ORDEM-DE-AUTORIA')))
    for autor in autores:
        nome = autor.get('NOME-COMPLETO-DO-AUTOR')
        nro_id_cnpq = autor.get('NRO-ID-CNPQ')
        authority = None if nro_id_cnpq in (None, '') else authorityPrefix+nro_id_cnpq
        confidence = None if authority is None else CF.UNCERTAIN
        meta.add(element='contributor', qualifier='author',
                 authority=authority, confidence=confidence,
                 value=nome)
    return meta.build()

def metadataTrabalhoEventos(item, xmlCV, xmlProducao):
    return None

def processCV(pessoaLattes, cv):
    seqProdInDB = getItemsProdInDB(pessoaLattes)
    seqProdInCV = set()
    for artigo in cv.xpath('//ARTIGO-PUBLICADO'):
        seqProdInCV.add(processProducao(pessoaLattes, metadataArtigo, cv, artigo))
    for trabalho in cv.xpath('//TRABALHO-EM-EVENTOS'):
        seqProdInCV.add(processProducao(pessoaLattes, metadataTrabalhoEventos, cv, trabalho))
    processRemovedItems(pessoaLattes, seqProdInDB - seqProdInCV)

def processProducao(pessoaLattes, getMetadata, xmlCV, xmlProducao):
    item = getItem(pessoaLattes, xmlProducao)
    meta = getMetadata(item, xmlCV, xmlProducao)
    lastMeta = db.session.query(db.Revision.meta)\
        .filter(db.Revision.item==item,
                db.Revision.source=='extract')\
        .order_by(db.Revision.id.desc())\
        .limit(1).scalar()
    if meta != lastMeta:
        db.session.add(db.Revision(item=item, source='extract', meta=meta))
    return item.seq_prod

def getItemsProdInDB(pessoaLattes):
    """ Obtém o seq_prod de todos os itens de uma pessoa """
    return {row[0] for row in
        db.session.query(db.Item.seq_prod)\
        .filter(db.Item.pessoa_lattes==pessoaLattes,
                # O metadado da última revisão não é nulo
                # (indica que o item não foi excluído)
                db.session.query(db.Revision.meta)\
                    .filter(db.Revision.item_id==db.Item.id)\
                    .order_by(db.Revision.id.desc())\
                    .limit(1).as_scalar()
                .isnot(None))\
        .all()}

def processRemovedItems(pessoaLattes, seqProdToRemove):
    """ Processa itens que existem no DB mas foram excluídos do CV """
    for seqProd in seqProdToRemove:
        item = db.session.query(db.Item)\
            .filter(db.Item.pessoa_lattes==pessoaLattes, db.Item.seq_prod==seqProd)\
            .one()
        # Insere nova revisão do item com metadado nulo
        db.session.add(db.Revision(item=item, source='extract', meta=None))

def getItem(pessoaLattes, xmlProducao):
    item, created = \
        db.session.get_or_create(db.Item,
                                 pessoa_lattes=pessoaLattes,
                                 seq_prod=int(xmlProducao.get('SEQUENCIA-PRODUCAO')))
    if created:
        logger.debug('Novo item %r' % item)
    return item

def processPerson(pessoa):
    pessoaLattes = getPessoaLattes(pessoa)
    cv = tryGetCV(pessoaLattes.id_cnpq)
    if cv is None:
        return
    logger.info('Processando CV de %r' % pessoaLattes)
    # Processa cada CV em uma transação
    try:
        processCV(pessoaLattes, cv)
        db.session.commit()
    except:
        traceback.print_exc()
        db.session.rollback()

wsCV = ws.WSCurriculo()

def tryGetCV(id_cnpq):
    try:
        return wsCV.obterCV(id_cnpq)
    except:
        ocorrencia = None
        try:
            ocorrencia = wsCV.obterOcorrencia(id_cnpq)
        except e:
            traceback.print_exc()
        logger.error('Impossível obter CV do id_cnpq %s: %r' % (id_cnpq, ocorrencia))
    return None

def getPessoaLattes(pessoa):
    if pessoa.getPessoaLattes() is None:
        cpf = pessoa.getCpf()
        logger.info('Obtendo id_cnpq do CPF %s' % cpf)
        db.session.add(db.PessoaLattes(
            id_cnpq=wsCV.obterIdCNPq(cpf),
            pessoa=pessoa.getEntidade()
        ))
        db.session.commit()
    return pessoa.getPessoaLattes()

def main():
    for line in sys.stdin.xreadlines():
        pessoaIdent = util.onlyNumbers(line)
        if pessoaIdent == '':
            if line.strip() != '':
                logger.warn('Ignorando linha não compreendida: %r' % line)
            continue
        pessoa = PessoaInstituicao.fromIdentificador(pessoaIdent)
        if pessoa is None:
            logger.error('Ignorando pessoa não encontrada: %s' % pessoaIdent)
        else:
            processPerson(pessoa)

if __name__ == '__main__':
    main()