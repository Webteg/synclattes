#!/usr/bin/python
# -*- encoding: utf-8 -*-

import re, json, logging
import urllib3, certifi
from lxml import etree
import sword2
from metadata import JSONMetadataWrapper
import conf.dspaceconf as dspaceconf
import db, dbutil, util

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('sync')

def main():
    ops = DSpaceOperations()

    for main_rev, other_revs in dbutil.yieldRevGroups(excludeDeletedMeta=False, excludeSingleRevs=False):
        all_revs = [main_rev] + other_revs
        dspace_item_id = None

        logging.info('Sincronizando grupo %r', [rev.id for rev in all_revs])

        # Verifica flag nosync
        for rev in all_revs:
            if rev.item.nosync:
                logger.info('Recusando sincronia devido à flag nosync no item %d',
                            rev.item.id)
                continue

        # Envia metadados
        if main_rev.meta is not None:
            if main_rev.item.dspace_item_id:
                # Caso um item do DSpace já tenha sido alocado alguma vez para o
                # novo item principal, utiliza o ID desse item
                dspace_item_id = main_rev.item.dspace_item_id
            else:
                # Utiliza o ID de algum dos outros itens do grupo, caso exista
                # Dá preferência para IDs que estejam ativos (not-withdrawn)
                result = util.firstOrNone((rev.item.dspace_item_id, rev.item)
                                          for rev in other_revs
                                          if rev.item.dspace_item_id is not None
                                          and rev.item.dspace_item_active)
                if result is None:
                    # Se não existir ID ativo, obtém um ID inativo, caso exista
                    result = util.firstOrNone((rev.item.dspace_item_id, rev.item)
                                              for rev in other_revs
                                              if rev.item.dspace_item_id is not None)
                    if result is not None:
                        ops.item_reinstate(dspace_item_id)
                if result is not None:
                    # Remove o ID do item no qual estava antes
                    dspace_item_id, item = result
                    assert item in db.session
                    item.dspace_item_id = None
                    item.dspace_item_active = False

            on_behalf_of = None  # TODO: preencher com email do CV após integração com LDAP
            meta = JSONMetadataWrapper(main_rev.meta)
            if dspace_item_id is None:
                dspace_item_id = ops.item_deposit(meta.toXml(), on_behalf_of=on_behalf_of)
                logger.info('Item %d (item %d local) submetido ao DSpace',
                            dspace_item_id, main_rev.item.id)
            else:
                ops.item_update_metadata(dspace_item_id, meta.toXml(), on_behalf_of=on_behalf_of)
                logger.info('Item %d (item %d local) atualizado no DSpace',
                            dspace_item_id, main_rev.item.id)

            assert main_rev.item in db.session
            main_rev.item.dspace_item_id = dspace_item_id
            main_rev.item.dspace_item_active = True

        # Coleta lixo
        for rev in all_revs:
            curid = rev.item.dspace_item_id
            active = rev.item.dspace_item_active
            if active and curid is not None and curid != dspace_item_id:
                # Limpa entradas que foram mescladas ou cujos metadados foram apagados
                if ops.item_has_bitstreams(curid):
                    logging.warning('O item %d do DSpace, correspondente ao item %d local, seria ' +
                                    'apagado, mas foi poupado por conter bitstreams associados. ' +
                                    'Por favor revise manualmente esse item e congele-o.',
                                    curid, rev.item.id)
                else:
                    ops.item_withdraw(curid)
                    logger.info('Item %d (item %d local) removido do DSpace', curid, rev.item.id)
                    assert rev.item in db.session
                    rev.item.dspace_item_active = False

        # Marca os itens com as últimas revisões
        for rev in all_revs:
            assert rev.item in db.session
            rev.item.dspace_cur_rev_id = rev.id

        db.session.commit()

    ops.logout()


class DSpaceOperations(object):
    editIriRegex = re.compile(r'^' + re.escape(dspaceconf.editIri).replace(r'\%d', r'(\d+)') + r'$')
    nsmap = {'atom': 'http://www.w3.org/2005/Atom'}
    def __init__(self):
        self.c = sword2.Connection(dspaceconf.serviceDocument, dspaceconf.username, dspaceconf.password)
        self.rest = RestSession(dspaceconf.restUrl, dspaceconf.username, dspaceconf.password)
    def logout(self):
        self.rest.logout()
    def item_withdraw(self, item_id):
        self.rest.request('POST', '/items/%d/withdraw' % item_id)
    def item_reinstate(self, item_id):
        self.rest.request('POST', '/items/%d/reinstate' % item_id)
    def item_has_bitstreams(self, item_id):
        statement = self.c.get_atom_sword_statement(dspaceconf.editMediaIri % item_id)
        return statement.dom.xpath('boolean(//atom:entry[1])', namespaces=self.nsmap)
    def item_deposit(self, root, on_behalf_of=None, in_progress=False):
        receipt = self.c.create(col_iri=dspaceconf.collectionIri,
                                metadata_entry=etree.tostring(root),
                                on_behalf_of=on_behalf_of,
                                in_progress=in_progress)
        return int(self.editIriRegex.match(receipt.edit).group(1))
    def item_update_metadata(self, item_id, root, on_behalf_of=None, in_progress=False):
        self.c.update(metadata_entry=etree.tostring(root),
                      edit_iri=dspaceconf.editIri % item_id,
                      edit_media_iri=dspaceconf.editMediaIri % item_id,
                      on_behalf_of=on_behalf_of,
                      in_progress=in_progress)

class RestError(Exception):
    def __init__(self, response):
        self.response = response
    def __str__(self):
        return '(status=%d, data=%r)' % (self.response.status, self.response.data)

class RestSession(object):
    def __init__(self, url, username, password):
        self.url = url
        self.http = urllib3.PoolManager(
            cert_reqs='CERT_REQUIRED',
            ca_certs=certifi.where(),
            headers={'Content-Type': 'application/json'}
        )
        token = self.request('POST', '/login', {'email': username, 'password': password})
        self.http.headers['rest-dspace-token'] = token
    def logout(self):
        self.request('POST', '/logout')
    def request(self, method, path, data=None):
        r = self.http.urlopen(method, self.url + path,
                              body=util.maybeBind(json.dumps, data))
        if r.status != 200:
            raise RestError(r)
        return r.data

if __name__ == '__main__':
    main()

