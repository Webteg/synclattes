#!/usr/bin/python
# -*- encoding: utf-8 -*-
import itertools, logging
from metadata import JSONMetadataWrapper
import db, dbutil
import conf.electdupconf as electdupconf
from ufscar.pessoa import PessoaInstituicao

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('electmaindup')

class RevisionJudge(object):
    def __init__(self, rev):
        self.rev = rev
        self.meta = JSONMetadataWrapper(rev.meta)

    def score(self):
        return self.scoreRole()\
             + self.scoreDoi()\
             + self.scoreAuthority()\
             + self.scoreRelevanceFlag()\
             + self.scoreMetadatumCompleteness()

    def scoreRole(self):
        pessoa = PessoaInstituicao(self.rev.item.pessoa_lattes.pessoa)
        scoreForRoles = (electdupconf.scoreForRole.get(role, 0) for role in pessoa.getRoles())
        return max(itertools.chain([0], scoreForRoles))

    def scoreDoi(self):
        return electdupconf.scoreDoi \
               if self.meta.getDoi() is not None \
               else 0

    def scoreAuthority(self):
        authorityValues = self.meta.get('dc.contributor.author', what='authority')
        return electdupconf.scorePerAuthorWithAuthorityId * \
               sum(int(bool(authority)) for authority in authorityValues)

    def scoreRelevanceFlag(self):
        return electdupconf.scoreForRelevanceFlag \
               if self.meta.getSingle('_lattes.relevancia') \
               else 0

    def scoreMetadatumCompleteness(self):
        return sum(electdupconf.scorePerMetadatumKey
                   for _ in self.meta.iterMetadata())


def main():
    assert dbutil.checkGroupIntegrity()
    for main_rev, other_revs in dbutil.yieldRevGroups():
        rev_group = [main_rev] + other_revs
        scoredRevs = sorted(((RevisionJudge(r).score(), r.id)
                             for r in rev_group),
                            reverse=True)
        logger.info('Grupo pontuado: %r' % scoredRevs)
        dbutil.reassignRevGroup(rev_group, scoredRevs[0][1])
    assert dbutil.checkGroupIntegrity()
    db.session.refresh_materialized_view(db.LastRevision)

if __name__ == '__main__':
    main()